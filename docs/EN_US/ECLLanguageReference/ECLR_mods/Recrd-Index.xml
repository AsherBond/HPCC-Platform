<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="INDEX_record_structure">
  <title>INDEX</title>

  <para><emphasis> attr</emphasis><emphasis role="bold"> := INDEX<indexterm>
      <primary>INDEX</primary>
    </indexterm>([</emphasis><emphasis> baserecset, </emphasis><emphasis
  role="bold">]</emphasis><emphasis> keys, indexfile </emphasis><emphasis
  role="bold">[,SORTED<indexterm>
      <primary>SORTED</primary>
    </indexterm>] [,OPT<indexterm>
      <primary>OPT</primary>
    </indexterm>] [,COMPRESSED<indexterm>
      <primary>COMPRESSED</primary>
    </indexterm>( LZW<indexterm>
      <primary>LZW</primary>
    </indexterm> | ROW<indexterm>
      <primary>ROW</primary>
    </indexterm> | FIRST<indexterm>
      <primary>FIRST</primary>
    </indexterm>) ]</emphasis><emphasis role="bold"> [,DISTRIBUTED<indexterm>
      <primary>DISTRIBUTED</primary>
    </indexterm>] [,FILEPOSITION( [
  </emphasis><emphasis>flag</emphasis><emphasis role="bold">] ) ] [,
  MAXLENGTH<indexterm>
      <primary>MAXLENGTH</primary>
    </indexterm>[</emphasis>(<emphasis>**value</emphasis>**)<emphasis
  role="bold">] ] );</emphasis></para>

  <para><emphasis> attr</emphasis><emphasis role="bold"> :=
  INDEX([</emphasis><emphasis> baserecset, </emphasis><emphasis
  role="bold">]</emphasis><emphasis> keys, payload, indexfile
  </emphasis><emphasis role="bold">[,SORTED] [,OPT]
  [,COMPRESSED(<emphasis>option</emphasis>) ] [,DISTRIBUTED] [,FILEPOSITION( [
  </emphasis><emphasis>flag</emphasis><emphasis role="bold">] ) ] [,
  MAXLENGTH<indexterm>
      <primary>MAXLENGTH</primary>
    </indexterm>[</emphasis>(<emphasis>value</emphasis>)<emphasis
  role="bold">] ]</emphasis>);</para>

  <para><emphasis> attr</emphasis><emphasis role="bold"> :=
  INDEX(</emphasis><emphasis>index,newindexfile</emphasis><emphasis
  role="bold"> [, MAXLENGTH<indexterm>
      <primary>MAXLENGTH</primary>
    </indexterm>[</emphasis>(<emphasis>value</emphasis>)<emphasis
  role="bold">] ]); </emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt"/>

      <colspec/>

      <tbody>
        <row>
          <entry><emphasis>attr</emphasis></entry>

          <entry>The name of the INDEX for later use in other
          attributes.</entry>
        </row>

        <row>
          <entry><emphasis>baserecset</emphasis></entry>

          <entry>Optional. The set of data records for which the index file
          has been created. If omitted, all fields in the
          <emphasis>keys</emphasis>and <emphasis>payload</emphasis>parameters
          must be fully qualified.</entry>
        </row>

        <row>
          <entry><emphasis>keys</emphasis></entry>

          <entry>The RECORD structure of key fields that reference into the
          <emphasis>baserecset</emphasis> (the "search terms" for the INDEX).
          Key fields may be <emphasis>baserecset</emphasis> fields or computed
          fields. REAL and DECIMAL types are not supported as "search term"
          fields. If omitted, all fields in the
          <emphasis>baserecset</emphasis> are used. This RECORD structure is
          typically defined inline within the INDEX using curly braces ({}),
          but may also be a separately defined RECORD structure. If the RECORD
          structure is separately defined it must meet the same requirements
          as used by the TABLE() function (the RECORD structure must define
          the type, name, and source of the data for each field), otherwise
          the BUILD action will not syntax check.</entry>
        </row>

        <row>
          <entry><emphasis>payload</emphasis></entry>

          <entry>The RECORD structure of the <emphasis>indexfile</emphasis>
          that contains additional fields not used as "search term" keys. This
          may contain fields from the <emphasis>baserecordset</emphasis>
          and/or computed fields. If the name of the
          <emphasis>baserecset</emphasis> is in this structure, it specifies
          "all other fields not already named in the keys parameter" are
          added. The payload fields do not take up space in the non-leaf nodes
          of the index and cannot be referenced in a KEYED() filter clause.
          Any field with the {BLOB} modifier (to allow more than 32K of data
          per index entry) is stored within the
          <emphasis>indexfile</emphasis>, but not with the rest of the record;
          accessing the BLOB data requires an additional seek. This RECORD
          structure is typically defined inline within the INDEX using curly
          braces ({}), but may also be a separately defined RECORD structure.
          If the RECORD structure is separately defined it must meet the same
          requirements as used by the TABLE() function (the RECORD structure
          must define the type, name, and source of the data for each field),
          otherwise the BUILD action will not syntax check.</entry>
        </row>

        <row>
          <entry><emphasis>indexfile</emphasis></entry>

          <entry>A string constant containing the logical filename of the
          index. See the <emphasis>Scope &amp; Logical Filenames</emphasis>
          section for more on logical filenames.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">SORTED</emphasis></entry>

          <entry>Optional. Specifies that when the index is accessed the
          records come out in the order of the <emphasis>keys</emphasis>. If
          omitted, the returned record order is undefined.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">OPT</emphasis></entry>

          <entry><para>Optional. Specifies that using the index when the
          <emphasis>indexfile</emphasis> doesn't exist results in an empty
          recordset instead of an error condition.</para></entry>
        </row>

        <row>
          <entry><emphasis role="bold">COMPRESSED</emphasis></entry>

          <entry><para>Optional. Specifies the index should be compressed
          using the type of compression specified. If omitted, the default is
          <emphasis role="bold">LZW</emphasis>, a variant of the
          Lempel-Ziv-Welch algorithm. </para></entry>
        </row>

        <row>
          <entry><emphasis>option</emphasis></entry>

          <entry>See <link linkend="IDXCOMP">Indexes and Compression</link>
          for options.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">DISTRIBUTED</emphasis></entry>

          <entry>Optional. Specifies that the index was created with the
          DISTRIBUTED option on the BUILD action<indexterm>
              <primary>BUILD action</primary>
            </indexterm> or the BUILD action simply referenced the INDEX
          declaration<indexterm>
              <primary>INDEX declaration</primary>
            </indexterm> with the DISTRIBUTED option. The INDEX is therefore
          accessed locally on each node (similar to the LOCAL
          function<indexterm>
              <primary>LOCAL function</primary>
            </indexterm>, which is preferred), is not globally sorted, and
          there is no root index to indicate which part of the index will
          contain a particular entry. This may be useful in Roxie queries in
          conjunction with ALLNODES use.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">FILEPOSITION</emphasis></entry>

          <entry>Optional. If <emphasis>flag</emphasis> is FALSE, prevents the
          normal behavior of implicit fileposition field being created and
          will not treat a trailing integer field any differently from the
          rest of the payload.</entry>
        </row>

        <row>
          <entry><emphasis>flag</emphasis></entry>

          <entry>Optional. TRUE or FALSE, indicating whether or not to create
          the implicit fileposition field.</entry>
        </row>

        <row>
          <entry><emphasis>index</emphasis></entry>

          <entry><para>The name of a previously defined INDEX attribute to
          duplicate.</para></entry>
        </row>

        <row>
          <entry><emphasis>newindexfile</emphasis></entry>

          <entry><para>A string constant containing the logical filename of
          the new index. See the <emphasis>Scope &amp; Logical
          Filenames</emphasis> section for more on logical
          filenames.</para></entry>
        </row>

        <row>
          <entry><emphasis role="bold">MAXLENGTH</emphasis></entry>

          <entry>Optional. This option is used to create indexes that are
          backward compatible for platform versions prior to 3.0. Specifies
          the maximum length of a variable-length index record. Fixed length
          records always use the minimum size required. If the default maximum
          length causes inefficiency problems, it can be explicitly
          overridden.</entry>
        </row>

        <row>
          <entry><emphasis>value</emphasis></entry>

          <entry>Optional. An integer value indicating the maximum length. If
          omitted, the maximum size is calculated from the record structure.
          Variable-length records that do not specify MAXLENGTH may be
          slightly inefficient</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para><emphasis role="bold">INDEX </emphasis>declares a previously created
  index for use. INDEX is related to BUILD (or BUILDINDEX) in the same manner
  that DATASET is to OUTPUT--BUILD creates an index file that INDEX then
  defines for use in ECL code. Index files are compressed. A single index
  record must be defined as less than 32K and result in a less than 8K page
  after compression.</para>

  <para>The Binary-tree metakey portion of the INDEX is a separate 32K file
  part on the first node of the Thor cluster on which it was built, but
  deployed to every node of a Roxie cluster. There are as many leaf-node file
  parts as there are nodes to the Thor cluster on which it was built. The
  specific distribution of the leaf-node records across execution nodes is
  undefined in general, as it depends on the size of the cluster on which it
  was built and the size of the cluster on which it is used.</para>

  <para>These data types are supported in the keyed portion of an
  INDEX:<itemizedlist>
      <listitem>
        <para>BOOLEAN</para>
      </listitem>

      <listitem>
        <para>INTEGER</para>
      </listitem>

      <listitem>
        <para>UNSIGNED</para>
      </listitem>

      <listitem>
        <para>STRING</para>
      </listitem>

      <listitem>
        <para>DATA</para>
      </listitem>

      <listitem>
        <para>QSTRING</para>

        <para>All STRINGs must be fixed length.</para>

        <para/>
      </listitem>
    </itemizedlist></para>

  <sect2 id="Keyed_Access_INDEX">
    <title>Keyed Access INDEX</title>

    <para>This form defines an index file to allow keyed access to the
    <emphasis>baserecset</emphasis>. The index is used primarily by the FETCH
    and JOIN (with the KEYED option) operations.</para>

    <para>Example:</para>

    <programlisting>PtblRec := RECORD
  STRING2 State := Person.per_st;
  STRING20 City := Person.per_full_city;
  STRING25 Lname := Person.per_last_name;
  STRING15 Fname := Person.per_first_name;
END;

PtblOut := OUTPUT(TABLE(Person,PtblRec),,'RTTEMP::TestFetch');
          
Ptbl := DATASET('RTTEMP::TestFetch',
          {PtblRec,UNSIGNED8 RecPtr {VIRTUAL(fileposition)}},
          FLAT);
          
AlphaInStateCity := INDEX(Ptbl,
                   {state,city,lname,fname,RecPtr},
                   'RTTEMPkey::TestFetch');
Bld := BUILDINDEX(AlphaInStateCity);</programlisting>
  </sect2>

  <sect2 id="Payload_INDEX">
    <title>Payload INDEX</title>

    <para>This form defines an index file containing extra payload fields in
    addition to the keys. The payload may contain fields with the {BLOB}
    modifier to allow more than 32K of data per index entry. These BLOB fields
    are stored within the <emphasis>indexfile</emphasis>, but not with the
    rest of the record; accessing the BLOB data requires an additional
    seek.</para>

    <para>This form is used primarily by "half-key" JOIN operations to
    eliminate the need to directly access the <emphasis>baserecset</emphasis>,
    thus increasing performance over the "full-keyed" version of the same
    operation (done with the KEYED option on the JOIN). By default, payload
    fields are not sorted during the BUILD action<indexterm>
        <primary>BUILD action</primary>
      </indexterm> to minimize space on the leaf nodes of the key. This
    sorting behavior can be controlled by using
    <emphasis>sortIndexPayload</emphasis> in a #OPTION statement.</para>

    <para>You can also use the "results in" operator (=&gt;) before payload
    fields as shown below.</para>

    <para>Example:</para>

    <programlisting>Vehicles := DATASET('vehicles',
          {STRING2 st,STRING20 city,STRING20 lname,
          UNSIGNED8 fpos{VIRTUAL(fileposition)}},FLAT);

VehicleKey1 := INDEX(Vehicles,{st,city},{lname,fpos},'vkey::st.city1');
BUILD(VehicleKey1);

SearchTerms := RECORD
  Vehicles.st;
  Vehicles.city;
END; 
Payload     := RECORD
  Vehicles.lname;
END; 
VehicleKey2 := INDEX(Vehicles,SearchTerms,Payload,'vkey::st.city2');
BUILD(VehicleKey2);

// Using "results in" operator (=&gt;) for payload fields
VehicleKey3 := INDEX(Vehicles,{st,city  =&gt; lname},'vkey::st.city3');
BUILD(VehicleKey3);
</programlisting>
  </sect2>

  <sect2 id="Duplicate_INDEX">
    <title>Duplicate INDEX</title>

    <para>This form defines a <emphasis>newindexfile </emphasis>that is
    identical to the previously defined <emphasis>index</emphasis>.</para>

    <para>Example:</para>

    <programlisting>NewVehicleKey := INDEX(VehicleKey,'NEW::vkey::st.city');
          //define NewVehicleKey like VehicleKey</programlisting>
  </sect2>

  <sect2 id="IDXCOMP" role="brk">
    <title>Indexes and Compression</title>

    <para><emphasis role="bold">Compression Options:</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec align="left" colwidth="188*"/>

        <colspec colwidth="836*"/>

        <tbody>
          <row>
            <entry><emphasis role="bold">LZW</emphasis></entry>

            <entry>The default compression. A variant of the Lempel-Ziv-Welch
            algorithm. </entry>
          </row>

          <row>
            <entry><emphasis role="bold">ROW</emphasis></entry>

            <entry>Compresses index entries based on differences between rows
            (<emphasis role="bold">for use with fixed-length records
            only</emphasis>). It typically does not compress as well as LZW,
            but takes up less space in memory because the rows are expanded on
            demand.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">'inplace'</emphasis></entry>

            <entry>Causes the index to be built using the inplace compression
            format. The payload defaults to using lz4 compression.</entry>
          </row>

          <row>
            <entry><emphasis role="bold"><emphasis
            role="bold">'inplace:lz4hc'</emphasis> </emphasis></entry>

            <entry>Causes inplace compression on the key fields and lz4hc
            compression on the payload. The resulting index can be smaller
            than using lz4.</entry>
          </row>

          <row>
            <entry><emphasis role="bold"><emphasis
            role="bold">'inplace:lz4s'</emphasis> </emphasis></entry>

            <entry>Causes inplace compression on the key fields and lz4s
            compression on the payload. This uses the LZ4 stream API to avoid
            recompressing the data and reduce the index build times.</entry>
          </row>

          <row>
            <entry><emphasis role="bold"><emphasis
            role="bold">'inplace:lz4shc'</emphasis> </emphasis></entry>

            <entry>Causes inplace compression on the key fields and lz4shc
            compression on the payload. This uses the high compression (HC)
            version of the LZ4 stream API to avoid recompressing the data and
            reduce the index build times. The default compression for inplace
            indexes in versions after versions 9.6.90, 9.8.66, and 9.10.12.
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The inplace index compression format (introduced in version 9.2.0)
    improves compression of keyed fields and allows them to be searched
    without decompression. The original index compression implementation
    decompresses the rows when they are read from disk.</para>

    <para>The lz4s and lz4hc inplace index compression formats (introduced in
    versions 9.6.90, 9.8.66, and 9.10.12 9.2.0 or later) improves compression
    and reduces build time. These formats require an engine that supports it.
    In other words, <emphasis role="bold">if you build an index using the lz4s
    or lz4shc formats, you must use a platform later than 9.6.90, 9.8.66, and
    9.10.12 to read those indexes.</emphasis></para>

    <para>If you attempt to read an index with the inplace compression format
    on a system that does not support it, you will receive an error
    message.</para>

    <para>Because the branch nodes can be searched without decompression more
    branch nodes fit into memory which can improve search performance. The lz4
    compression used for the payload is significantly faster at decompressing
    leaf pages than the previous LZW compression. Whether performance is
    better with lz4hc (a high-compression variant of lz4) on the payload
    fields depends on the access characteristics of the data and how much of
    the index is cached in memory.</para>

    <para><emphasis role="bold">Compression Levels :</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec align="left" colwidth="240*"/>

        <colspec colwidth="733*"/>

        <tbody>
          <row>
            <entry><emphasis role="bold">hclevel</emphasis></entry>

            <entry>An integer between 3 and 12 to specify the level of
            compression. The default is 3. Higher levels increase the
            compression, but also increase the compression times. This may be
            cost effective depending on the length of time the data is stored,
            and the storage costs compared to the compute costs to build the
            index.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">maxcompression</emphasis></entry>

            <entry>The maximum desired compression ratio. This avoids the leaf
            nodes getting too large when expanded, but increases the size of
            some indexes. The default is 20.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">maxrecompress</emphasis></entry>

            <entry>Specifies the number of times the entire input dataset
            should be recompressed to free up space. Increasing the number
            decreases the size of the indexes, and will probably decrease the
            decompress time slightly (because there are fewer stream blocks),
            but will increase the build time. The default is 1.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para/>

    <para>Example:</para>

    <programlisting>Vehicles := DATASET('vehicles',
          {STRING2 st,STRING20 city,STRING20 lname},FLAT);

SearchTerms := RECORD
  Vehicles.st;
  Vehicles.city;
END; 
Payload     := RECORD
  Vehicles.lname;
END; 
VehicleKey := INDEX(Vehicles,SearchTerms,Payload,'vkey::st.city',
                    COMPRESSED('inplace:lz4shc,compressopt(hclevel=9,
                                                           maxcompression=25,
                                                           maxrecompress=4)'));
BUILD(VehicleKey);</programlisting>

    <para>See Also: <link linkend="DATASET">DATASET</link>, <link
    linkend="BUILD">BUILDINDEX</link>, <link linkend="JOIN">JOIN</link>, <link
    linkend="FETCH">FETCH</link>, <link
    linkend="KEYED-WILD">KEYED/WILD</link></para>
  </sect2>
</sect1>
